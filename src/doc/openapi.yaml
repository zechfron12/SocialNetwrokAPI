openapi: 3.0.3
info:
  title: Social Network Api - OpenAPI 3.0
  description: >-
    This is a simple Social Network Api.
    In this API you care create, read, update, and delete users and their friend lists.

    Some useful links:

    - [The Social Network API repository](https://github.com/zechfron12/SocialNetwrokAPI)


    Used technologies:
     - Typescript
     - NodeJS
     - Express
     - MongoDB
     - Jest
     - Heroku
     - Swagger


    Tehnical Stuff:
      An user is represented by an id, name and list of friends.
      The friendship links are representet as a adjency list of a graph. By using this approach it is very easy to keep track of the relation between entyties.


    Finding the shortest paths:



      One of the most common pathing algorithm is dijkstra algorithm, but it is a lot more suited for weighted graphs.


      Another approach is doing a DFS. This algorithm could be very efictive if the end node is located in the right direction, but otherwise it can lead to some slow and incorrect solutions.


      For this kind of problems I implemented the solution using BFS. This algorithm explores all the neighbors of a node before moving on to the next level of the graph. Because all links have the same impact, a BFS can always stop in the first moment when the destination was found, by merorizing the number of steps taken from previous nodes.


    Some relevant test cases:
      A and B are not friends, and there is no chain of friends between them. In this case, the function should return -1.


      A and B are the same user. In this case, the function should return 0.


      A and B are direct friends. In this case, the function should return 1.


      A and B are not direct friends, but there is a chain of friends between them. In this case, the function should return the length of the chain.


      A and B are not connected in the graph. In this case, the function should return -1.

      Testing the functionality of creating, reading, updating and deleting the users.

  version: 1.0.0
servers:
  - url: https://immense-spire-09428.herokuapp.com
  - url: http://localhost:8000
tags:
  - name: user
    description: Operations about user
paths:
  /users:
    get:
      tags:
        - users
      summary: Gets users
      description: Get All users from the server.
      operationId: getUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        500:
          description: internal error
    post:
      tags:
        - users
      summary: Create user
      description: Creates a new user in the database.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request, name is too short
        500:
          description: internal error
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by id
      description: ""
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: "The id of the user"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid id supplied
        "404":
          description: User not found
    put:
      tags:
        - users
      summary: Update user
      description: Change the name and/or friends fo a user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: Id of the user
          required: true
          schema:
            type: string
      requestBody:
        description: Update user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema: $ref:"#/components/schemas/User"
        400:
          description: List or Name is not valid
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: Id of the user that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: Succsessful operation
        404:
          description: User not found
  /friends/add:
    post:
      tags:
        - friends
      summary: Add friends
      description: Add existent to the friendlist of another user and vice versa.
      operationId: addFriend
      requestBody:
        description: Insert id and a list of friends, this will give an error if one the the parsed ids are inexistent.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddFriends"

      responses:
        200:
          description: Succsessful operation
        404:
          description: User not found
  /friends/find-path:
    get:
      tags:
        - friends
      summary: Finds the shortest chain of friends between 2 users
      description: Using the bfs algorithm, this route return the shortest chain of friends between 2 users.
      operationId: findPath
      requestBody:
        description: Insert the ids of the 2 users.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindPathParams"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
              type: object
              properties:
                name: message
                type: string
                example:
              friends:
                name: idEnd
                type: string
        404:
          description: User not found

components:
  schemas:
    UpdateUser:
      type: object
      properties:
        name:
          type: string
          example: John
        friends:
          type: array
          items:
            type: string
    User:
      type: object
      properties:
        id:
          type: string;
          example:
        name:
          type: string
          example: John
        friends:
          type: array
          items:
            type: string
    CreateUser:
      type: object
      properties:
        name:
          type: string
          minLenght: 1
          example: John
    AddFriends:
      type: object
      properties:
        userId:
          type: string
        friends:
          type: array
          items:
            type: string
    FindPathParams:
      type: object
      properties:
        idBegin:
          type: string
        idEnd:
          type: string
